[{"content":"参考\nHugo中文文档 (gohugo.org) Docs - Hugo中文文档 (gohugo.org) hugo · Andbible 安装Hugo 参考 https://www.gohugo.org/doc/overview/installing/\n创建与配置 创建本地博客目录 使用Hugo生成本地博客目录（站点），比如希望生成到 /path/to/site 路径：\nhugo new site /path/to/site 这样就在 /path/to/site 目录里生成了初始站点，进入目录：\ncd /path/to/site 站点目录结构（大致如下）：\n- archetypes/ - content/ # 存放markdown文件 - layouts/ - static/ - config.toml 或是 config.yml/yaml/json，个人目前倾向于yaml 安装皮肤 皮肤列表\nComplete List | Hugo Themes (gohugo.io) 皮肤列表 到 皮肤列表 挑选一个心仪的皮肤，比如你觉得 Hyde 皮肤不错，找到相关的 GitHub 地址，在本地站点目录下创建目录 themes，在 themes 目录里把皮肤 git clone 下来：\n# 创建 themes 目录 cd themes git clone https://github.com/spf13/hyde.git 在config.yaml中配置相应theme\nconfig.yaml config是Hugo的配置文件。Hugo支持多种类型的config文件。\nHugo 首先在源目录查找一个 config.toml 的配置文件。如果这个文件不存在，将会查找 config.yaml，然后是 config.json\nconfig内部具体配置可以参考 配置 Hugo - Hugo中文文档 (gohugo.org)。\n需要注意的是config的配置内容和选用的主题是相关联的。比如选用的主题是hyde，那么config的配置内容就是hyde主题的配置内容。\n创建文章与配置 创建文章 创建一个 about 页面：\nhugo new about.md about.md 自动生成到了 content/about.md ，打开 about.md 看下：\n--- date = \u0026#34;2015-10-25T08:36:54-07:00\u0026#34; draft = true title = \u0026#34;about\u0026#34; --- 正文内容 上述内容模板，是根据站点目录下的archetypes/default.md文件生成的。如果你想自定义生成的内容，可以修改archetypes/default.md文件，具体可以参考loveit主题下的archetypes/default.md。\n使用+++ 表示是 TOML 格式的，根据你的喜好，你可以换成 YAML 格式（使用 --- 标记）或者 JSON 格式。\n创建第一篇文章，放到 post 目录，方便之后生成聚合页面。\nhugo new post/first.md 打开编辑 post/first.md ：\n--- date: \u0026#34;2015-10-25T08:36:54-07:00\u0026#34; title: \u0026#34;first\u0026#34; --- ### Hello Hugo 1. aaa 1. bbb 1. ccc 运行与部署 参考\nUsing Hugo - Hugo中文文档 (gohugo.org)可以查看一些命令行具体参数 主要分成两种，hugo命令生成静态网站目录，而hugo server命令则是启动一个web服务器，可以用于调试或是直接代替apache等服务。\nHugo的参数首先具有默认值，其次会被config.yaml中的配置覆盖，最后才是命令行参数覆盖。\n调试Hugo 在你的站点根目录执行 Hugo server 启动服务器进行调试：\nhugo server --buildDrafts --bind=127.0.0.1 --port=1313 --baseURL=127.0.0.1 （注明：v0.15 版本之后，不再需要使用 --watch 参数了） 浏览器里打开： http://localhost:1313\n--buildDrafts 参数表示生成草稿页面，如果不需要生成草稿页面，可以去掉这个参数。\n上述bind, port, baseURL 是Hugo的默认值，用于本地调试。默认值会被config.yaml代替。\n生成静态网站 在站点根目录执行 Hugo 命令生成最终页面：\nhugo --baseUrl=\u0026#34;http://coderzh.github.io/\u0026#34; （注意，以上命令并不会生成草稿页面，如果未生成任何文章，请去掉markdown文章头部的 draft=true 再重新生成。）\n这里的--baseUrl 等参数也可以写在 config.yml 中，不需要每次都在命令行中写参数，直接执行 hugo 即可。\n如果一切顺利，所有静态页面都会生成到 public 目录。\n部署到GitHub 有两种方式，一种是通过将public/目录push到远程仓库xxx.github.io中，另一种是使用GitHub Actions。\npush public目录 cd public git init git remote add origin https://github.com/coderzh/coderzh.github.io.git git add -A git commit -m \u0026#34;init\u0026#34; git branch -M main git push -u origin main 浏览器里访问：http://coderzh.github.io/\n之后再次push，则直接通过add, commit, push即可。\n使用GitHub Actions 可以通过GitHub Actions自动部署，其原理是将/path/to/site目录push到远程仓库，通过提交到GitHub，远程仓库自动执行hugo命令生成public作为另一个分支gh-pages内容，然后GitHub Pages选择gh-pages分支去渲染站点。\n重点是Actions的编写。具体可以参考 知乎|使用hugo生成静态博客并部署在GitHub上。GitHub Actions还有很多其他强大的功能，值得深入学习。\n关于部署的说明 运行 hugo 命令 并不会 删除之前生成的文件。这意味着你必须在运行 hugo 命令之前删除你的 public/ 目录（或者你通过 -d/--destination 指定的目录）。 不然的话，你可能有运行遗留在生成目录的错误文件的风险（比如草稿或者未来的文章）。换一个主题也会有同样的问题。\n一个简单的处理方法如下。\ncd /path/to/site # 从远程仓库clone一份public目录 git clone git@github.com:coderzh/coderzh.github.io.git # 改名为public并且删除其中内容，重新生成public rm -rf public mv coderzh.github.io/ public/ cd public/ find . -not -path \u0026#34;./.git/*\u0026#34; -not -name \u0026#34;.gitignore\u0026#34; -not -name \u0026#34;.git\u0026#34; -delete cd .. hugo # 提交public目录，同时清除过去commit git checkout --orphan nb git add -A git commit -m \u0026#34;init\u0026#34; git branch -D main git branch -M main git push -f origin main 在服务器上部署 首先是经典的，通过生成静态网站public，然后通过nginx等服务进行部署。\n除此以外还有一种更便捷的选择。由于 Hugo 运行的非常快，不仅在生成站点时，也 在运行 Web 服务时（得益于 Go 语言关于并发和多线程的良好设计）。 有些用户事实上选择使用 Hugo 本身作为 Web 服务器用于他的生产环境服务器。\n不再需要其他的 Web 服务器了 （Apache 、 nginx 、 IIS ……）。\n如果想直接把hugo server当作对外展示服务，则需要修改对应bind以及baseURL，将bind改成服务器ip地址，baseURL改成域名。下面是执行的命令：\nhugo server --bind=88.88.88.88 --port=6666 --baseURL=\u0026#34;http://coderzh.com/\u0026#34; 执行完可以访问http://coderzh.com/6666。\nhugo server --baseURL=http://yoursite.org/ \\ --port=80 \\ --appendPort=false \\ --bind=87.245.198.50 执行完可以访问http://yoursite.org/。（没有端口号得益于--appendPort=false）\n注意 bind 选项，指定了服务器绑定到哪个网络接口（默认是 127.0.0.1 ，适用于大多数开发的时候）。 有些服务器，比如 Amazon WS ，使用网络地址转换（NAT）导致你有时很难找到实际使用的 IP 地址。 使用 --bind=0.0.0.0 将可以绑定到所有接口。\n通过这种方法，实际上你可以只部署你的源文件了，因为 Hugo 会在你的服务器上及时的生成 Web 站点。（而不用生成静态网站public）\n此时对源文件做出修改，Hugo server会自动重新生成网站。\n你可以添加 --disableLiveReload=true 可选选项，如果你不希望将 LiveReload 相关的 JavaScript 代码添加到你的页面。\n","permalink":"http://momanto.github.io/posts/hugo-use/","summary":"参考\nHugo中文文档 (gohugo.org) Docs - Hugo中文文档 (gohugo.org) hugo · Andbible 安装Hugo 参考 https://www.gohugo.org/doc/overview/installing/\n创建与配置 创建本地博客目录 使用Hugo生成本地博客目录（站点），比如希望生成到 /path/to/site 路径：\nhugo new site /path/to/site 这样就在 /path/to/site 目录里生成了初始站点，进入目录：\ncd /path/to/site 站点目录结构（大致如下）：\n- archetypes/ - content/ # 存放markdown文件 - layouts/ - static/ - config.toml 或是 config.yml/yaml/json，个人目前倾向于yaml 安装皮肤 皮肤列表\nComplete List | Hugo Themes (gohugo.io) 皮肤列表 到 皮肤列表 挑选一个心仪的皮肤，比如你觉得 Hyde 皮肤不错，找到相关的 GitHub 地址，在本地站点目录下创建目录 themes，在 themes 目录里把皮肤 git clone 下来：\n# 创建 themes 目录 cd themes git clone https://github.","title":"Hugo基本操作"}]